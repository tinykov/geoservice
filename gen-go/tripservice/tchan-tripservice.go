// @generated Code generated by thrift-gen. Do not modify.

// Package tripservice is generated code used to make or handle TChannel calls using Thrift.
package tripservice

import (
	"fmt"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go/thrift"
)

// Interfaces for the service and client for the services defined in the IDL.

// TChanTripService is the interface that defines the server handler and client interface.
type TChanTripService interface {
	GetVehiclesNearRider(ctx thrift.Context, lat float64, lon float64) (VehicleList, error)
	UpdateDriverLocation(ctx thrift.Context, lat float64, lon float64, vehicleID string) error
}

// Implementation of a client and service handler.

type tchanTripServiceClient struct {
	thriftService string
	client        thrift.TChanClient
}

func NewTChanTripServiceInheritedClient(thriftService string, client thrift.TChanClient) *tchanTripServiceClient {
	return &tchanTripServiceClient{
		thriftService,
		client,
	}
}

// NewTChanTripServiceClient creates a client that can be used to make remote calls.
func NewTChanTripServiceClient(client thrift.TChanClient) TChanTripService {
	return NewTChanTripServiceInheritedClient("tripService", client)
}

func (c *tchanTripServiceClient) GetVehiclesNearRider(ctx thrift.Context, lat float64, lon float64) (VehicleList, error) {
	var resp TripServiceGetVehiclesNearRiderResult
	args := TripServiceGetVehiclesNearRiderArgs{
		Lat: lat,
		Lon: lon,
	}
	success, err := c.client.Call(ctx, c.thriftService, "getVehiclesNearRider", &args, &resp)
	if err == nil && !success {
		switch {
		default:
			err = fmt.Errorf("received no result or unknown exception for getVehiclesNearRider")
		}
	}

	return resp.GetSuccess(), err
}

func (c *tchanTripServiceClient) UpdateDriverLocation(ctx thrift.Context, lat float64, lon float64, vehicleID string) error {
	var resp TripServiceUpdateDriverLocationResult
	args := TripServiceUpdateDriverLocationArgs{
		Lat:       lat,
		Lon:       lon,
		VehicleID: vehicleID,
	}
	success, err := c.client.Call(ctx, c.thriftService, "updateDriverLocation", &args, &resp)
	if err == nil && !success {
		switch {
		default:
			err = fmt.Errorf("received no result or unknown exception for updateDriverLocation")
		}
	}

	return err
}

type tchanTripServiceServer struct {
	handler TChanTripService
}

// NewTChanTripServiceServer wraps a handler for TChanTripService so it can be
// registered with a thrift.Server.
func NewTChanTripServiceServer(handler TChanTripService) thrift.TChanServer {
	fmt.Println("Register NewTChanTripServiceServer with handler(%v)",handler)
	return &tchanTripServiceServer{
		handler,
	}
}

func (s *tchanTripServiceServer) Service() string {
	return "tripService"
}

func (s *tchanTripServiceServer) Methods() []string {
	return []string{
		"getVehiclesNearRider",
		"updateDriverLocation",
	}
}

func (s *tchanTripServiceServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "getVehiclesNearRider":
		return s.handleGetVehiclesNearRider(ctx, protocol)
	case "updateDriverLocation":
		return s.handleUpdateDriverLocation(ctx, protocol)

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanTripServiceServer) handleGetVehiclesNearRider(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req TripServiceGetVehiclesNearRiderArgs
	var res TripServiceGetVehiclesNearRiderResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.GetVehiclesNearRider(ctx, req.Lat, req.Lon)
		//fmt.Println("GetVehicles inside tchannl ....%v",ctx)

	if err != nil {
		return false, nil, err
	} else {
		res.Success = r
	}

	return err == nil, &res, nil
}

func (s *tchanTripServiceServer) handleUpdateDriverLocation(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req TripServiceUpdateDriverLocationArgs
	var res TripServiceUpdateDriverLocationResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	err :=
		s.handler.UpdateDriverLocation(ctx, req.Lat, req.Lon, req.VehicleID)

	if err != nil {
		return false, nil, err
	} else {
	}

	return err == nil, &res, nil
}
