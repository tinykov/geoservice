// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package tripservice

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	//"git.apache.org/thrift.git/lib/go/thrift"
  "github.com/apache/thrift/lib/go/thrift"
  //"github.com/uber/tchannel-go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type VehicleList []*VehiclesNearRider

func VehicleListPtr(v VehicleList) *VehicleList { return &v }

// Attributes:
//  - VehicleID
//  - S2Position
//  - Latitude
//  - Longitude
type VehiclesNearRider struct {
  VehicleID string `thrift:"vehicle_id,1,required" db:"vehicle_id" json:"vehicle_id"`
  S2Position string `thrift:"s2_position,2,required" db:"s2_position" json:"s2_position"`
  Latitude float64 `thrift:"latitude,3,required" db:"latitude" json:"latitude"`
  Longitude float64 `thrift:"longitude,4,required" db:"longitude" json:"longitude"`
}

func NewVehiclesNearRider() *VehiclesNearRider {
  return &VehiclesNearRider{}
}


func (p *VehiclesNearRider) GetVehicleID() string {
  return p.VehicleID
}

func (p *VehiclesNearRider) GetS2Position() string {
  return p.S2Position
}

func (p *VehiclesNearRider) GetLatitude() float64 {
  return p.Latitude
}

func (p *VehiclesNearRider) GetLongitude() float64 {
  return p.Longitude
}
func (p *VehiclesNearRider) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetVehicleID bool = false;
  var issetS2Position bool = false;
  var issetLatitude bool = false;
  var issetLongitude bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetVehicleID = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetS2Position = true
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLatitude = true
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLongitude = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetVehicleID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VehicleID is not set"));
  }
  if !issetS2Position{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field S2Position is not set"));
  }
  if !issetLatitude{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Latitude is not set"));
  }
  if !issetLongitude{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Longitude is not set"));
  }
  return nil
}

func (p *VehiclesNearRider)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.VehicleID = v
}
  return nil
}

func (p *VehiclesNearRider)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.S2Position = v
}
  return nil
}

func (p *VehiclesNearRider)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Latitude = v
}
  return nil
}

func (p *VehiclesNearRider)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Longitude = v
}
  return nil
}

func (p *VehiclesNearRider) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VehiclesNearRider"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VehiclesNearRider) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vehicle_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vehicle_id: ", p), err) }
  if err := oprot.WriteString(string(p.VehicleID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vehicle_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vehicle_id: ", p), err) }
  return err
}

func (p *VehiclesNearRider) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s2_position", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:s2_position: ", p), err) }
  if err := oprot.WriteString(string(p.S2Position)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.s2_position (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:s2_position: ", p), err) }
  return err
}

func (p *VehiclesNearRider) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latitude: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latitude (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latitude: ", p), err) }
  return err
}

func (p *VehiclesNearRider) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longitude: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longitude (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longitude: ", p), err) }
  return err
}

func (p *VehiclesNearRider) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VehiclesNearRider(%+v)", *p)
}

type TripService interface {
  // Parameters:
  //  - Lat
  //  - Lon
  GetVehiclesNearRider(ctx context.Context, lat float64, lon float64) (r VehicleList, err error)
  // Parameters:
  //  - Lat
  //  - Lon
  //  - VehicleID
  UpdateDriverLocation(ctx context.Context, lat float64, lon float64, vehicle_id string) (err error)
}

type TripServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewTripServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TripServiceClient {
  return &TripServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewTripServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TripServiceClient {
  return &TripServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Lat
//  - Lon
func (p *TripServiceClient) GetVehiclesNearRider(ctx context.Context, lat float64, lon float64) (r VehicleList, err error) {
  if err = p.sendGetVehiclesNearRider(lat, lon); err != nil { return }
  return p.recvGetVehiclesNearRider()
}

func (p *TripServiceClient) sendGetVehiclesNearRider(lat float64, lon float64)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getVehiclesNearRider", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := TripServiceGetVehiclesNearRiderArgs{
  Lat : lat,
  Lon : lon,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *TripServiceClient) recvGetVehiclesNearRider() (value VehicleList, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getVehiclesNearRider" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getVehiclesNearRider failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getVehiclesNearRider failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getVehiclesNearRider failed: invalid message type")
    return
  }
  result := TripServiceGetVehiclesNearRiderResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Lat
//  - Lon
//  - VehicleID
func (p *TripServiceClient) UpdateDriverLocation(ctx context.Context, lat float64, lon float64, vehicle_id string) (err error) {
  if err = p.sendUpdateDriverLocation(lat, lon, vehicle_id); err != nil { return }
  return p.recvUpdateDriverLocation()
}

func (p *TripServiceClient) sendUpdateDriverLocation(lat float64, lon float64, vehicle_id string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateDriverLocation", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := TripServiceUpdateDriverLocationArgs{
  Lat : lat,
  Lon : lon,
  VehicleID : vehicle_id,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *TripServiceClient) recvUpdateDriverLocation() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateDriverLocation" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateDriverLocation failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateDriverLocation failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateDriverLocation failed: invalid message type")
    return
  }
  result := TripServiceUpdateDriverLocationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}


type TripServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TripService
}

func (p *TripServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TripServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TripServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTripServiceProcessor(handler TripService) *TripServiceProcessor {

  self4 := &TripServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["getVehiclesNearRider"] = &tripServiceProcessorGetVehiclesNearRider{handler:handler}
  self4.processorMap["updateDriverLocation"] = &tripServiceProcessorUpdateDriverLocation{handler:handler}
return self4
}

func (p *TripServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x5

}

type tripServiceProcessorGetVehiclesNearRider struct {
  handler TripService
}

func (p *tripServiceProcessorGetVehiclesNearRider) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TripServiceGetVehiclesNearRiderArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getVehiclesNearRider", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TripServiceGetVehiclesNearRiderResult{}
var retval VehicleList
  var err2 error
  if retval, err2 = p.handler.GetVehiclesNearRider(ctx, args.Lat, args.Lon); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVehiclesNearRider: " + err2.Error())
    oprot.WriteMessageBegin("getVehiclesNearRider", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getVehiclesNearRider", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tripServiceProcessorUpdateDriverLocation struct {
  handler TripService
}

func (p *tripServiceProcessorUpdateDriverLocation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TripServiceUpdateDriverLocationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateDriverLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TripServiceUpdateDriverLocationResult{}
  var err2 error
  if err2 = p.handler.UpdateDriverLocation(ctx, args.Lat, args.Lon, args.VehicleID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDriverLocation: " + err2.Error())
    oprot.WriteMessageBegin("updateDriverLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("updateDriverLocation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Lat
//  - Lon
type TripServiceGetVehiclesNearRiderArgs struct {
  Lat float64 `thrift:"lat,1" db:"lat" json:"lat"`
  Lon float64 `thrift:"lon,2" db:"lon" json:"lon"`
}

func NewTripServiceGetVehiclesNearRiderArgs() *TripServiceGetVehiclesNearRiderArgs {
  return &TripServiceGetVehiclesNearRiderArgs{}
}


func (p *TripServiceGetVehiclesNearRiderArgs) GetLat() float64 {
  return p.Lat
}

func (p *TripServiceGetVehiclesNearRiderArgs) GetLon() float64 {
  return p.Lon
}
func (p *TripServiceGetVehiclesNearRiderArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TripServiceGetVehiclesNearRiderArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Lat = v
}
  return nil
}

func (p *TripServiceGetVehiclesNearRiderArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Lon = v
}
  return nil
}

func (p *TripServiceGetVehiclesNearRiderArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getVehiclesNearRider_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TripServiceGetVehiclesNearRiderArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lat", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lat: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Lat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lat (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lat: ", p), err) }
  return err
}

func (p *TripServiceGetVehiclesNearRiderArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lon", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lon: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Lon)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lon (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lon: ", p), err) }
  return err
}

func (p *TripServiceGetVehiclesNearRiderArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TripServiceGetVehiclesNearRiderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TripServiceGetVehiclesNearRiderResult struct {
  Success VehicleList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTripServiceGetVehiclesNearRiderResult() *TripServiceGetVehiclesNearRiderResult {
  return &TripServiceGetVehiclesNearRiderResult{}
}

var TripServiceGetVehiclesNearRiderResult_Success_DEFAULT VehicleList

func (p *TripServiceGetVehiclesNearRiderResult) GetSuccess() VehicleList {
  return p.Success
}
func (p *TripServiceGetVehiclesNearRiderResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TripServiceGetVehiclesNearRiderResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TripServiceGetVehiclesNearRiderResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(VehicleList, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &VehiclesNearRider{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Success = append(p.Success, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TripServiceGetVehiclesNearRiderResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getVehiclesNearRider_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TripServiceGetVehiclesNearRiderResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TripServiceGetVehiclesNearRiderResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TripServiceGetVehiclesNearRiderResult(%+v)", *p)
}

// Attributes:
//  - Lat
//  - Lon
//  - VehicleID
type TripServiceUpdateDriverLocationArgs struct {
  Lat float64 `thrift:"lat,1" db:"lat" json:"lat"`
  Lon float64 `thrift:"lon,2" db:"lon" json:"lon"`
  VehicleID string `thrift:"vehicle_id,3" db:"vehicle_id" json:"vehicle_id"`
}

func NewTripServiceUpdateDriverLocationArgs() *TripServiceUpdateDriverLocationArgs {
  return &TripServiceUpdateDriverLocationArgs{}
}


func (p *TripServiceUpdateDriverLocationArgs) GetLat() float64 {
  return p.Lat
}

func (p *TripServiceUpdateDriverLocationArgs) GetLon() float64 {
  return p.Lon
}

func (p *TripServiceUpdateDriverLocationArgs) GetVehicleID() string {
  return p.VehicleID
}
func (p *TripServiceUpdateDriverLocationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TripServiceUpdateDriverLocationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Lat = v
}
  return nil
}

func (p *TripServiceUpdateDriverLocationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Lon = v
}
  return nil
}

func (p *TripServiceUpdateDriverLocationArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VehicleID = v
}
  return nil
}

func (p *TripServiceUpdateDriverLocationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateDriverLocation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TripServiceUpdateDriverLocationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lat", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lat: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Lat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lat (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lat: ", p), err) }
  return err
}

func (p *TripServiceUpdateDriverLocationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lon", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lon: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Lon)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lon (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lon: ", p), err) }
  return err
}

func (p *TripServiceUpdateDriverLocationArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vehicle_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vehicle_id: ", p), err) }
  if err := oprot.WriteString(string(p.VehicleID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vehicle_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vehicle_id: ", p), err) }
  return err
}

func (p *TripServiceUpdateDriverLocationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TripServiceUpdateDriverLocationArgs(%+v)", *p)
}

type TripServiceUpdateDriverLocationResult struct {
}

func NewTripServiceUpdateDriverLocationResult() *TripServiceUpdateDriverLocationResult {
  return &TripServiceUpdateDriverLocationResult{}
}

func (p *TripServiceUpdateDriverLocationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TripServiceUpdateDriverLocationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateDriverLocation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TripServiceUpdateDriverLocationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TripServiceUpdateDriverLocationResult(%+v)", *p)
}


